b. SQL statements: 
    List SQL statements used to create all your database entities (tables). Should use a standardized naming convention

.mode columns
.headers on
.nullvalue 'null'

pragma foreign_keys=0;
drop table restaurant;
drop table employee;
drop table shift;
drop table food;
drop table customer;
drop table receipt;
drop table restaurant_table;
drop table pays;
drop table serves;
drop table reserves;

create table restaurant (
    RestaurantID int not null,
    Max_occupancy int check (Max_occupancy > 0),
    Open_time time not null,
    Close_time time not null,
    Street varchar(30) not null,
    City varchar(30) not null,
    State char(2) not null,
    Zip int not null check (zip >= 10000 and zip <= 99999),
    primary key(restaurantID) 
);

create table employee (
    EmployeeID int not null check (EmployeeID >= 1000 and EmployeeID <= 9999),
    E_Fname varchar(15) not null,
    E_Lname varchar(15) not null,
    Wage decimal(10,2),
    Type varchar(15) not null check (Type in ('Waiter', 'Waitress', 'Chef', 'Manager', 'Owner', 'Host', 'Hostess', 'Janitor')), 
    Ssn char(9) not null,
    RestaurantID int not null,
    primary key (EmployeeID),
    unique (Ssn),
    foreign key(RestaurantID) references restaurant(RestaurantID) on delete cascade on update cascade
    check (Wage > 0)
);

create table shift (
    StartTime timestamp not null,
    EndTime timestamp not null,
    Break int,
    EmployeeID int not null,
    primary key(StartTime, EmployeeID),
    foreign key(EmployeeID) references employee(EmployeeID) on delete cascade on update cascade
);

create table food (
    FoodID int not null check(FoodID >= 100000 and FoodID <= 999999),
    Food_Name varchar(30) not null,
    Type varchar(10) not null,
    Meal varchar(15) not null,
    Serving int,
    Price decimal(4,2) not null,
    primary key (FoodId),
    check (Type in ('Drink', 'Dessert', 'Entree', 'Appetizer', 'Side', 'Any')),
    check (Meal in ('Breakfast', 'Lunch', 'Dinner', 'Any'))
);

create table customer (
    CustomerID  int not null,
    Customer_Name varchar (20),
    Email varchar(30),
    Phone_number char(12),
    primary key (CustomerID),
    check (CustomerID >= 1000 and CustomerID <= 9999),
    check (email is not null OR phone_number is not null)
);

create table receipt(
    ReceiptID  int  not null     check(receiptID >= 1000000 and receiptID <= 9999999),
    Tip     decimal(5,2) not null,
    Fees    decimal(5,2) not null,
    TotalCost   decimal(5,2) not null,
    PaymentTime timestamp not null, 
    Discount    decimal(10,2) not null,
    PaymentType varchar(15) not null check(PaymentType in ('Cash', 'Card', 'GiftCard', 'Check')),
    RestaurantID int not null check (RestaurantID >= 100 and RestaurantID <= 999),
    primary key (ReceiptID),
    foreign key(RestaurantID) references restaurant(RestaurantID) on delete set null on update cascade
);

create table restaurant_table (
    TableID int     not null,
    Size int     not null,
    RestaurantID int    not null ,
    primary key (TableID, RestaurantID),
    foreign key (RestaurantID) references restaurant(RestaurantID) on delete cascade on update cascade,
    check (RestaurantID >= 100 and RestaurantID <= 999),
    check (Size > 0),
    check (TableID >= 10 and TableID <= 99)
);

create table pays (
    ReceiptID int not null  check(receiptID >= 1000000 and receiptID <= 9999999),
    FoodID int not null     check(FoodID >= 100000 and FoodID <= 999999),
    CustomerID int not null check(CustomerID >= 1000 and CustomerID <= 9999),
    primary key(ReceiptID, FoodID),
    foreign key(ReceiptID) references receipt(receiptID) on delete cascade on update cascade,
    foreign key(FoodID) references food(FoodID) on delete cascade on update cascade,
    foreign key(CustomerID) references customer(CustomerID) on delete set null on update cascade
);

create table reserves (
    CustomerID int not null check (CustomerID >= 1000 and CustomerID <= 9999),
    TableID int not null check (TableID >= 10 and TableID <= 99),
    RestaurantID int not null check (RestaurantID >= 100 and RestaurantID <= 999),
    StartTime timestamp not null,
    ReservationType varchar(20),
    Party       int not null check (party >= 1),
    primary key(CustomerID, TableID, RestaurantID, StartTime),
    foreign key(CustomerID) references customer(CustomerID) on delete cascade on update cascade,
    foreign key(TableID, RestaurantID) references restaurant_table(TableID, RestaurantID) on delete cascade on update cascade
);

create table serves (
    CustomerID  int not null check (CustomerID >= 1000 and CustomerID <= 9999),
    RestaurantID int not null check (RestaurantID >= 100 and RestaurantID <= 999),
    primary key(CustomerID, RestaurantID),
    foreign key(CustomerID) references customer(CustomerID) on delete cascade on update cascade,
    foreign key(RestaurantID) references restaurant(RestaurantID) on delete cascade on update cascade
);

pragma foreign_key=1;

insert into restaurant values (100, 200, '8:00', '22:00', '152 53th Ave S', 'Renton', 'WA',  98134);
insert into restaurant values (101, 50, '6:00', '22:00', '555 Campus Way N', 'Bothell', 'WA',  97546);
insert into restaurant values (102, 100, '7:00', '21:00', '202 1st Ave N', 'Tacoma', 'WA',  98121);
insert into restaurant values (103, 150, '8:00', '21:30', '1001 Pine St', 'Seattle', 'WA',  92012);
insert into restaurant values (104, 75, '5:00', '22:30', '152 2nd Ave', 'Woodenville', 'WA',  98254);

insert into customer values(1111, 'Emma Watson', 'emma.watson@gmail.com', '2065554999');
insert into customer values(2222, 'Daniel Radcliffe', 'iamharrypotter@gmail.com', '2516667878');
insert into customer values(3333, 'John Smith', 'johns@gmail.com', '2065558888');
insert into customer values(4444, 'Rupert Grint', 'iamron@gmail.com', '5554049999');

insert into food values(111111, 'Chicken Wings', 'Entree', 'Any', 3, 11.99);
insert into food values(111112, 'Cheese Burger', 'Entree', 'Any', 2, 5.99);
insert into food values(111113, 'Cheesecake', 'Dessert', 'Any', 1, 4.99);
insert into food values(111114, 'Cheese Sticks', 'Appetizer', 'Any', 1, 3.99);
insert into food values(111115, 'Fries', 'Appetizer', 'Any', 1, 5.49);
insert into food values(111116, 'Coke', 'Drink', 'Any', 1, 0.99);
insert into food values(111117, 'Sprite', 'Drink', 'Any', 1, 0.99);
insert into food values(111118, 'Pancake', 'Entree', 'Breakfast', 1, 4.99);

insert into restaurant_table values(10, 4, 100);
insert into restaurant_table values(11, 5, 100);
insert into restaurant_table values(12, 4, 100);
insert into restaurant_table values(13, 10, 100);
insert into restaurant_table values(10, 4, 101);
insert into restaurant_table values(11, 3, 101);
insert into restaurant_table values(12, 4, 101);
insert into restaurant_table values(13, 2, 101);
insert into restaurant_table values(10, 4, 102);
insert into restaurant_table values(11, 5, 102);
insert into restaurant_table values(12, 10, 102);
insert into restaurant_table values(13, 15, 102);
insert into restaurant_table values(10, 4, 103);
insert into restaurant_table values(11, 2, 103);
insert into restaurant_table values(12, 4, 103);
insert into restaurant_table values(13, 6, 103);
insert into restaurant_table values(10, 2, 104);
insert into restaurant_table values(11, 4, 104);
insert into restaurant_table values(12, 8, 104);
insert into restaurant_table values(13, 8, 104);

insert into employee values(1001, 'Jane', 'Whiteman', 17.50, 'Chef', '321654789', 100);
insert into employee values(1002, 'Joe', 'Gatto', 18.50, 'Chef', '436278743', 100);
insert into employee values(1003, 'Jessica', 'Carpenter', 16.00, 'Waitress', '123456789', 100);
insert into employee values(1004, 'Flo', 'Florence', 16.00, 'Waitress', '534782748', 101);
insert into employee values(1005, 'Luke', 'Rawlings', 14.00, 'Janitor', '258962156', 101);
insert into employee values(1006, 'Bob', 'Peng', 31.25, 'Manager', '751235485', 101);
insert into employee values(1007, 'Pat', 'Williamson', 16.00, 'Waitress', '12345999', 102);
insert into employee values(1008, 'Alex', 'Connor', 16.00, 'Host', '953827478', 102);
insert into employee values(1009, 'Tom', 'Brady', 30.50, 'Manager', '198309403', 102);
insert into employee values(1010, 'Twilight', 'Sparkle', 100.00, 'Owner', '234234859', 103);
insert into employee values(1011, 'Jeff', 'Bezos', 16.50, 'Waiter', '159452170', 104);
insert into employee values(1012, 'Elon', 'Musk', 18.20, 'Janitor', '847264729', 104);

insert into shift values('2021-01-10 07:30:00', '2021-01-10 15:00:00', 30, 1001);
insert into shift values('2022-01-10 08:00:00', '2022-01-10 17:00:00', 30, 1001);
insert into shift values('2021-01-11 13:30:00', '2021-01-11 23:00:00', 30, 1001);
insert into shift values('2021-01-10 13:00:00', '2021-01-10 23:30:00', 30, 1002);
insert into shift values('2021-01-11 07:00:00', '2021-01-11 14:00:00', 40, 1002);
insert into shift values('2021-01-10 07:30:00', '2021-01-10 14:30:00', 30, 1003);
insert into shift values('2021-01-11 14:00:00', '2021-01-11 22:30:00', 30, 1003);
insert into shift values('2021-01-14 05:30:00', '2021-01-14 13:00:00', 45, 1004);
insert into shift values('2021-01-13 12:30:00', '2021-01-13 22:30:00', 30, 1004);
insert into shift values('2021-01-13 20:30:00', '2021-01-13 23:00:00', 50, 1005);
insert into shift values('2021-01-14 20:00:00', '2021-01-14 23:00:00', 30, 1005);
insert into shift values('2021-01-13 05:00:00', '2021-01-13 16:00:00', 60, 1006);
insert into shift values('2021-01-14 12:30:00', '2021-01-14 22:30:00', 30, 1006);
insert into shift values('2021-01-16 06:00:00', '2021-01-16 14:00:00', 30, 1007);
insert into shift values('2021-01-15 13:30:00', '2021-01-15 22:00:00', 100, 1007);
insert into shift values('2021-01-15 06:30:00', '2021-01-15 15:00:00', 30, 1008);
insert into shift values('2021-01-16 14:30:00', '2021-01-16 22:30:00', 30, 1008);
insert into shift values('2021-01-16 06:30:00', '2021-01-16 13:00:00', 35, 1009);
insert into shift values('2021-01-15 12:30:00', '2021-01-15 22:00:00', 30, 1009);
insert into shift values('2021-01-17 07:30:00', '2021-01-17 22:00:00', 45, 1010);
insert into shift values('2021-01-18 07:00:00', '2021-01-18 22:00:00', 30, 1010);
insert into shift values('2021-01-19 04:30:00', '2021-01-19 14:00:00', 40, 1011);
insert into shift values('2021-01-20 13:00:00', '2021-01-20 23:00:00', 50, 1011);
insert into shift values('2021-01-20 19:30:00', '2021-01-20 23:00:00', 45, 1012);
insert into shift values('2021-01-19 19:00:00', '2021-01-19 23:00:00', 30, 1012);

insert into reserves values(1111, 10, 100, '2021-02-12 15:30:00', 'family reunion', 30);
insert into reserves values(2222, 11, 101, '2021-02-12 11:30:00', 'date',3);
insert into reserves values(3333, 10, 103, '2021-02-12 09:30:00', 'business',5);
insert into reserves values(2222, 12, 100, '2021-03-16 08:30:00', 'wedding', 30);
insert into reserves values(1111, 13, 100, '2021-06-23 15:30:00', 'wedding', 30);
insert into reserves values(2222, 13, 101, '2021-01-12 18:00:00', 'birthday', 5);
insert into reserves values(3333, 12, 102, '2021-08-08 19:30:00', 'business',3);
insert into reserves values(4444, 10, 104, '2021-05-19 13:45:00', null, 10);

insert into serves values(1111, 100);
insert into serves values(2222, 101);
insert into serves values(3333, 102);
insert into serves values(4444, 104);

insert into receipt values(1000000, 5.00, 6.00, 40.00, '2021-01-10 12:53:02', 2.00, 'Card', 100);
insert into receipt values(1000001, 10.00, 20.00, 85.23, '2021-01-10 22:59:51', 10.00, 'Card', 100);
insert into receipt values(1000002, 0.00, 10.29, 21.67, '2021-01-11 11:11:21', 0.00, 'Cash', 101);
insert into receipt values(1000003, 10.11, 0.89, 11.21, '2021-01-11 12:45:56', 1.40, 'GiftCard', 101);
insert into receipt values(1000004, 10.56, 20.89, 153.23, '2021-01-13 23:45:56', 20.40, 'GiftCard', 102);
insert into receipt values(1000005, 20.01, 5.39, 368.23, '2021-01-13 10:45:56', 48.22, 'Check', 102);
insert into receipt values(1000006, 0.00, 0.00, 15.86, '2021-02-01 11:22:33', 0.00, 'Cash', 103);
insert into receipt values(1000007, 0.00, 0.00, 26.11, '2021-02-01 22:22:22', 0.00, 'Card', 103);
insert into receipt values(1000008, 0.00, 0.00, 12423.88, '2021-02-01 11:22:33', 0.00, 'Cash', 104);
insert into receipt values(1000009, 0.00, 0.00, 4.99, '2021-02-01 22:22:22', 0.00, 'Card', 104);
insert into receipt values(1000010, 5.00, 6.00, 40.00, '2021-01-10 12:53:02', 2.00, 'Card', 100);
insert into receipt values(1000011, 10.00, 20.00, 85.23, '2021-01-10 22:59:51', 10.00, 'Card', 100);
insert into receipt values(1000012, 0.00, 10.29, 21.67, '2021-01-11 11:11:21', 0.00, 'Cash', 101);
insert into receipt values(1000013, 10.11, 0.89, 11.21, '2021-01-11 12:45:56', 1.40, 'GiftCard', 101);
insert into receipt values(1000014, 10.56, 20.89, 153.23, '2021-01-13 23:45:56', 20.40, 'GiftCard', 102);
insert into receipt values(1000015, 20.01, 5.39, 368.23, '2021-01-13 10:45:56', 48.22, 'Check', 102);
insert into receipt values(1000016, 0.00, 0.00, 15.86, '2021-02-01 11:22:33', 0.00, 'Cash', 103);
insert into receipt values(1000017, 0.00, 0.00, 26.11, '2021-02-01 22:22:22', 0.00, 'Card', 103);
insert into receipt values(1000018, 1.00, 2.00, 12423.88, '2021-02-01 11:22:33', 0.00, 'Cash', 104);
insert into receipt values(1000019, 1.23, 1.89, 27.99, '2021-02-01 22:22:22', 0.00, 'Card', 104);


insert into pays values(1000000, 111111, 1111);
insert into pays values(1000001, 111112, 1112);
insert into pays values(1000002, 111113, 1113); 
insert into pays values(1000003, 111114, 4444); 
insert into pays values(1000004, 111111, 2222);
insert into pays values(1000004, 111112, 2222);
insert into pays values(1000004, 111113, 2222);
insert into pays values(1000004, 111114, 2222);
insert into pays values(1000004, 111115, 2222);
insert into pays values(1000005, 111116, 3333);
insert into pays values(1000006, 111117, 4444);
insert into pays values(1000007, 111118, 4444);
insert into pays values(1000008, 111111, 4444);
insert into pays values(1000009, 111111, 3333);
insert into pays values(1000010, 111111, 4444);
insert into pays values(1000011, 111112, 3333);
insert into pays values(1000012, 111113, 4444);
insert into pays values(1000013, 111114, 4444);
insert into pays values(1000014, 111115, 3333);
insert into pays values(1000015, 111116, 3333);
insert into pays values(1000016, 111117, 3333);
insert into pays values(1000017, 111118, 4444);
insert into pays values(1000018, 111111, 4444);
insert into pays values(1000019, 111111, 1111);
insert into pays values(1000019, 111113, 1111);
insert into pays values(1000019, 111115, 1111);
insert into pays values(1000019, 111117, 1111);
insert into pays values(1000019, 111118, 1111);

select * from restaurant;
select * from customer;
select * from food;
select * from employee;
select * from restaurant_table;
select * from shift;
select * from reserves;
select * from serves;
select * from pays;
select * from receipt;


b.  SQL statements: 
    List SQL statements needed to support functions of your project.

● Retrieve a receipt based on receiptID from a given restaurant to bill a customer for their food
   ○ To process transactions for food orders, a restaurant needs to be able to generate a receipt for a customer based on the food they ordered
   ○ For example: retrieve a receipt for a customer from a restaurant with restaurantID = 100 and receiptID = 1000000;
    
select customer_name, p.receiptID, TotalCost 
from pays p, customer c, restaurant r, receipt 
where p.CustomerID = c.CustomerID and receipt.RestaurantID = r.RestaurantID  
and receipt.ReceiptID = p.ReceiptID and r.restaurantID = 100 and p.receiptID = 1000000;

● Retrieve the salary (get the sum of all shifts worked in a (user) given year by an employee, for example, 2021) for all employees
 
select e.employeeID, e.E_Fname, e.E_Lname, e.type, sum((((strftime('%H', s.endTime) - strftime('%H',s.startTime)) + ((strftime('%M', s.endTime)/60) - (strftime('%M',s.startTime)/60))) * e.wage)) 
from employee e, shift s 
where e.employeeID = s.employeeID and s.startTime like ('%2021%') 
group by e.employeeID;

● Allow a specific employee to see their salary given their employeeID
    ○ For example, retrieve the salary for employee 1001

select e.employeeID, e.E_Fname, e.E_Lname, e.type, sum((((strftime('%H', s.endTime) - strftime('%H',s.startTime)) + ((strftime('%M', s.endTime)/60) - (strftime('%M',s.startTime)/60))) * e.wage)) 
from employee e, shift s 
where e.employeeID = s.employeeID and s.startTime like ('%2021%') and e.employeeID = 1001 
group by e.employeeID;

● Retrieve an employee’s earnings for a certain day based on the hours they worked in their shift multiplied by their hourly wage given a date and an EmployeeID
    ○ For example, retrieve the earnings for employee 1001 on the 10th of january in 2021

select e.E_Fname, e.E_Lname, e.type, (((strftime('%H', s.endTime) - strftime('%H',s.startTime)) + ((strftime('%M', s.endTime)/60) - (strftime('%M',s.startTime)/60))) * e.wage) 
from employee e, shift s 
where e.employeeID = s.employeeID and s.startTime like ('%2021-01-10%') and e.employeeID = 1001;

● Retrieve all receipts including information about each order

select pays.ReceiptID, food.Food_Name, food.price 
from food, pays 
where food.FoodID = pays.FoodID;

● List all items (food) a customer ordered given a receiptID

select f.Food_Name, f.price 
from food f, pays p 
where f.FoodID = p.FoodID and p.receiptID = 1000019;

● Retrieve all reservation times for a certain day to find what table a customer registered for
    ○ When a customer registered for a reservation either online or called it in, a host/hostess should be able to find and bring it up 

select Customer_name, TableID, StartTime 
from CUSTOMER c, RESERVES r 
where c.CustomerID = r.CustomerID and StartTime like ('%2021-02-12%');

● Retrieve the food menu for all restaurants (The menu is similar for all restaurants)

select Food_Name, Type, Meal, Serving, Price 
from food 
order by Food_Name ASC;

● Retrieve a restaurant based on location to see their currently filled reservation times
● For example, to book a reservation, a customer may want to see all tables that are currently booked by a local restaurant.

select rt.RestaurantID, rsv.TableID, rsv.StartTime 
from reserves rsv, restaurant rt 
where rt.City like ('%Bothell%') 
order by rt.RestaurantID ASC;

● Calculate the gross profit and number of sale of each restaurant by adding up all receipts a restaurant made in a year
● For example, calculate the total profit made by each restaurant in 2021 to see net profit margins.

select RestaurantID, sum(TotalCost), count(ReceiptID) 
from receipt 
where PaymentTime like ('%2021%') 
group by RestaurantID;

● Add new food during holiday season, delete when it’s over

insert into food values (111120, 'Baked Holiday Pie', 'Dessert', 'Any', 1, 4.99);
insert into food values (111121, 'Baked Peach Pie', 'Dessert', 'Any', 1, 5.99);
insert into food values (111122, 'Baked Pumkin Pie', 'Dessert', 'Any', 1, 3.99);
insert into food values (111123, 'Baked Strawberry Pie', 'Dessert', 'Any', 1, 4.99);
delete from food where foodID in (111120, 111121, 111122, 111123);

● Retrieve Employee name and type (job) and restaurant for every restaurant in Washington

select E_Fname, E_Lname, type, RestaurantID from employee 
where RestaurantID in (select RestaurantID from restaurant where State = 'WA') 
order by RestaurantID ASC;
